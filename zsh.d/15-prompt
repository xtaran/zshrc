# -*- sh -*-

# Make parts of the root prompt red
if (( EUID != 0 )); then
    USERBEGIN="%B"
    USEREND="%b"
    BLOCKBEGIN="%S"
    BLOCKEND="%s"
else
    USERBEGIN="%{[31m%}"
    USEREND="%{[m%}"
    BLOCKBEGIN="%B"
    BLOCKEND="%b"
fi

# Show distribution's codename in the prompt
if [[ -x /usr/bin/lsb_release ]]; then
    DISTRIBUTION_CODENAME=`lsb_release -cs`
elif grep -qE '^DISTRIB_CODENAME=' /etc/*release; then
    RELEASE_FILE=$(grep -lE '^DISTRIB_CODENAME=' /etc/*release)
    for rf in $RELEASE_FILE; do
        . $rf
    done
    DISTRIBUTION_CODENAME="$DISTRIB_CODENAME"
else
    DISTRIBUTION_CODENAME=$(uname)
fi

# Check how to current shell has been reached
case $TERM in
    # screen and friends
    *screen*)
	if [[ -n "$BYOBU_RUN_DIR" ]]; then
            _SHELL_ACCESS=byobu
	elif [[ -n "$TMUX" ]]; then
            _SHELL_ACCESS=tmux
	else
            _SHELL_ACCESS=screen
	fi
	;;
    # Other means to start a shell
    *)
	if [[ -n "$SPLITVT" ]]; then
	    _SHELL_ACCESS=splitvt
	elif [[ -n "$SUDO_USER" ]]; then
	    _SHELL_ACCESS="sudo%{[m%}:%{[36m%}$SUDO_USER"
	fi
	;;
esac

# Determine if an SSH session is a real SSH session or a Mosh session
if [[ -z "$_SHELL_ACCESS" ]]; then
    if [[ -n "$SSH_CLIENT" ]]; then
	_IS_MOSH=`ps uxw | awk '$2=='$PPID' && $11~/mosh/ {print}'`
	if [[ -n "$_IS_MOSH" ]]; then
            _SHELL_ACCESS=mosh
	else
            _SHELL_ACCESS=ssh
	fi
    fi
fi

# Overwrite precmd function from grml's zshrc
is4 && [[ $NOPRECMD -eq 0 ]] && precmd () {
    [[ $NOPRECMD -gt 0 ]] && return 0
    # update VCS information
    (( ${+functions[vcs_info]} )) && vcs_info

    if [[ $TERM == screen* ]] ; then
        # Axel: Show more than just "zsh" or branch in screen's window title
        if [[ -n ${vcs_info_msg_1_} ]] ; then
            ESC_print "$(print -Pn '%1~'):${vcs_info_msg_1_}"
        else
            ESC_print "$(print -Pn '%1~')"
        fi
    fi
    # just use DONTSETRPROMPT=1 to be able to overwrite RPROMPT
    if [[ ${DONTSETRPROMPT:-} -eq 0 ]] ; then
        if [[ $BATTERY -gt 0 ]] ; then
            # update battery (dropped into $PERCENT) information
            battery
            RPROMPT="%(?..:() ${PERCENT}"
        else
            RPROMPT="%(?..:() "
        fi
    fi
    # adjust title of xterm
    # see http://www.faqs.org/docs/Linux-mini/Xterm-Title.html
    [[ ${NOTITLE:-} -gt 0 ]] && return 0
    # Make settings Depending on window manager
    if [[ -n "$DISPLAY" && -x /usr/bin/wmname ]]; then
        WM=$(wmname) 2>/dev/null
    elif [[ -n "$DISPLAY" && -x /usr/bin/xwininfo ]]; then
        WM=$(xwininfo -root | fgrep "the root window" | awk -F'"' '{print $2}')  2>/dev/null
    fi
    NUMBER_PATH_ELEMENTS_TITLE=''
    if [[ "$WM" = "awesome" ]]; then
        NUMBER_PATH_ELEMENTS_TITLE=2
    fi

    case $TERM in
        (xterm*|rxvt*)
            # Axel: Don't show user and hostname if not a remote shell
            if [ -n "$_SHELL_ACCESS" ]; then
                set_title ${(%):-"%n@%m: %~"}
            else
                set_title ${(%):-"%${NUMBER_PATH_ELEMENTS_TITLE}~"}
            fi
            ;;
    esac
}

# Overwrite preexec function from grml's zshrc
is4 && [[ $NOPRECMD -eq 0 ]] && \
preexec () {
    [[ $NOPRECMD -gt 0 ]] && return 0
# set hostname if not running on host with name 'grml'
    if [[ -n "$HOSTNAME" ]] && [[ "$HOSTNAME" != $(hostname) ]] ; then
       NAME="@$HOSTNAME"
    fi
# get the name of the program currently running and hostname of local machine
# set screen window title if running in a screen
    if [[ "$TERM" == screen* ]] ; then
        # local CMD=${1[(wr)^(*=*|sudo|ssh|-*)]}       # don't use hostname
        local CMD="${1[(wr)^(*=*|sudo|ssh|-*)]}$NAME" # use hostname
        ESC_print ${CMD}
    fi
# adjust title of xterm
    [[ ${NOTITLE} -gt 0 ]] && return 0
    case $TERM in
        (xterm*|rxvt*)
            # Axel: Don't show user and hostname if not a remote shell
            if [ -n "$_SHELL_ACCESS" ]; then
                set_title "${(%):-"%n@%m:"}" "$1"
            else
                set_title ${(%):-"$1"}
            fi
            ;;
    esac
}


# Git prompt stuff
# https://github.com/yonchu/zsh-vcs-prompt via
# https://github.com/olivierverdier/zsh-git-prompt/issues/23#issuecomment-9913745

source ${HOME}/.zsh/zsh-vcs-prompt/zshrc.sh

ZSH_VCS_PROMPT_AHEAD_SIGIL='â†‘'
ZSH_VCS_PROMPT_BEHIND_SIGIL='â†“'
ZSH_VCS_PROMPT_STAGED_SIGIL='+'
ZSH_VCS_PROMPT_CONFLICTS_SIGIL='Ã—'
ZSH_VCS_PROMPT_UNSTAGED_SIGIL='+'
ZSH_VCS_PROMPT_UNTRACKED_SIGIL='â€¦'
ZSH_VCS_PROMPT_STASHED_SIGIL='â€£'
ZSH_VCS_PROMPT_CLEAN_SIGIL=' âœ” '
unset ZSH_VCS_PROMPT_MERGE_BRANCH

## GIT
# VCS name
ZSH_VCS_PROMPT_GIT_FORMATS='%{%F{magenta}%}(%{%f%}#s%{%F{magenta}%})%{%f%} '
# Begin
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{magenta}%}[%{%f%}'
# Branch name
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{green}%}#b%{%f%}'
# Ahead and Behind
ZSH_VCS_PROMPT_GIT_FORMATS+='#c#d%{%F{magenta}%}|%{%f%}'
# Staged
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{green}%}#e%{%f%b%}'
# Conflicts
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{red}%}#f%{%f%b%}'
# Unstaged
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{yellow}%}#g%{%f%b%}'
# Untracked
ZSH_VCS_PROMPT_GIT_FORMATS+='#h'
# Clean
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{green}%}#j%{%f%b%}'
# Stashed
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{yellow}%}#i%{%f%b%}'
# End
ZSH_VCS_PROMPT_GIT_FORMATS+='%{%F{magenta}%}]%{%f%}'

## Other VCS
# VCS name
ZSH_VCS_PROMPT_VCS_FORMATS='%{%F{magenta}%}(%{%f%}#s%{%F{magenta}%})%{%f%} '
# Begin
ZSH_VCS_PROMPT_VCS_FORMATS+='%{%F{magenta}%}[%{%f%}'
# Branch name
ZSH_VCS_PROMPT_VCS_FORMATS+='%{%F{green}%}#b%{%f%}'
# End
ZSH_VCS_PROMPT_VCS_FORMATS+='%{%F{magenta}%}]%{%f%}'

# $ZSH_VERSION
PROMPT="%S!%h Z%i %(?..%{[31m%})?%?%(?..%{[m%}%S) L%L%s ${_SHELL_ACCESS:+"%{[36m%}$_SHELL_ACCESS "}%{[m%}${debian_chroot:+($debian_chroot)}${USERBEGIN}%n@%m${USEREND}%B:%~%b (%y %U$ZSH_ARGZERO ${ZSH_VERSION}%u ${DISTRIBUTION_CODENAME}) %B%* %b%<<"'$(vcs_super_info)'$'\n'"%B%23<[â€¦]<%~%<< %(!.#.â†’)%b "

#PROMPT="${RED}${EXITCODE}${WHITE}${debian_chroot:+($debian_chroot)}${BLUE}%n${NO_COLOUR}@%m %40<...<%B%~%b%<< "'${VCS_INFO_message_0_}'"%# "
